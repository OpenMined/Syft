import fastapi
from fastapi import Depends, HTTPException, Request

from .auth import verify_admin_credentials
from .user import User, UserManager

user_router = fastapi.APIRouter(
    prefix="/users",
    tags=["users"],
)


def notify_user(user: User) -> None:
    print(f"New token {user.email}: {user.token}")


def get_user_manager(request: Request) -> UserManager:
    return request.state.user_manager


@user_router.post("/register_tokens")
async def register_tokens(
    emails: list[str],
    user_manager: UserManager = Depends(get_user_manager),
    is_admin: bool = Depends(verify_admin_credentials),
) -> list[User]:
    """
    Register tokens for a list of emails.
    All users are created in the db with a random token, and an email is sent to each user.

    If the user already exists, the existing user is notified again with the same token.

    Args:
        emails (list[str]): list of emails to register.
        is_admin (bool, optional): checks if the user is an admin.
        user_manager (UserManager, optional): the user manager. Defaults to Depends(get_user_manager).

    Returns:
        list[User]: list of users created.
    """
    users = []
    for email in emails:
        user = user_manager.create_token_for_user(email)
        users.append(user)
        notify_user(user)

    return users


@user_router.post("/ban")
async def ban(
    email: str,
    is_admin: bool = Depends(verify_admin_credentials),
    user_manager: UserManager = Depends(get_user_manager),
) -> User:
    try:
        user = user_manager.ban_user(email)
        return user
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))


@user_router.post("/unban")
async def unban(
    email: str,
    is_admin: bool = Depends(verify_admin_credentials),
    user_manager: UserManager = Depends(get_user_manager),
) -> User:
    try:
        user = user_manager.unban_user(email)
        return user
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))


@user_router.post("/register")
async def register(
    email: str,
    token: str,
    user_manager: UserManager = Depends(get_user_manager),
) -> None:
    """Endpoint used by the user to register. This only works if the user has the correct token.

    Args:
        email (str): user email
        token (str): user token, generated by /register_tokens
    """
    try:
        user = user_manager.register_user(email, token)
        print(f"User {user.email} registered")
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
